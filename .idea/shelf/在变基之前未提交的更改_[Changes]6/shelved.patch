Index: src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public Scanner scanner;\r\n    public PrintWriter output;\r\n    List<Player> players;\r\n    List<Card> deck;\r\n    List<Card> event_deck;\r\n    List<Card> playedCards;\r\n    List<Card> played_eventCards;\r\n\r\n    int current_player = 0;\r\n    int current_player_round = 0;\r\n\r\n    List<Player> players_Participants;\r\n    int [] stage;\r\n    int addcard = 0;\r\n    int sponsor = 100;\r\n    public Main(){\r\n        players = new ArrayList<>();\r\n        deck = new ArrayList<>();\r\n        event_deck = new ArrayList<>();\r\n        played_eventCards = new ArrayList<>();\r\n        playedCards = new ArrayList<>();\r\n        players_Participants = new ArrayList<>();\r\n        stage = new int[0];\r\n    }\r\n    public static void main(String[] args) {\r\n        Main newGame = new Main();\r\n        newGame.startGame();\r\n        newGame.distributeallCards();\r\n        newGame.startRound(newGame.scanner);\r\n        System.exit(0);\r\n    }\r\n    public void initialize_event_Deck(){\r\n        // Create events E cards\r\n        for (int i = 1; i <= 5; i++) {\r\n            if (i == 1 ) event_deck.add(new Card(\"E\",  \"Pl\", 2));\r\n            else if (i <= 1+2) event_deck.add(new Card(\"E\",  \"Qf\", 2));\r\n            else event_deck.add(new Card(\"E\",  \"Pr\", 2));\r\n        }\r\n        // Create quest (Q) cards\r\n        for (int i = 1; i <= 12; i++) {\r\n            if (i <= 3 )event_deck.add(new Card(\"Q\",  \"Q\", 2));\r\n            else if (i <= 3+4 )event_deck.add(new Card(\"Q\",  \"Q\", 3));\r\n            else if (i <= 3+4+3 )event_deck.add(new Card(\"Q\",  \"Q\", 4));\r\n            else event_deck.add(new Card(\"Q\",  \"Q\", 5));\r\n        }\r\n    }\r\n    public void initializeDeck() {\r\n\r\n        // Create Foes (F) cards\r\n        for (int i = 1; i <= 50; i++) {\r\n            if (i <= 8 ) deck.add(new Card(\"F\",  \"F\", 5));\r\n            else if (i <= 8+7) deck.add(new Card(\"F\",  \"F\", 10));\r\n            else if (i <= 8+7+8) deck.add(new Card(\"F\",  \"F\", 15));\r\n            else if (i <= 8+7+8+7) deck.add(new Card(\"F\",  \"F\", 20));\r\n            else if (i <= 8+7+8+7+7) deck.add(new Card(\"F\",  \"F\", 25));\r\n            else if (i <= 8+7+8+7+7+4) deck.add(new Card(\"F\",  \"F\", 30));\r\n            else if (i <= 8+7+8+7+7+4+4) deck.add(new Card(\"F\",  \"F\", 35));\r\n            else if (i <= 8+7+8+7+7+4+4+2) deck.add(new Card(\"F\",  \"F\", 40));\r\n            else if (i <= 8+7+8+7+7+4+4+2+2) deck.add(new Card(\"F\",  \"F\", 50));\r\n            else deck.add(new Card(\"F\",  \"F\", 70));\r\n        }\r\n        // Create basic weapon cards: Swords, battle-axes, lances, horses, excaliburs, and daggers\r\n        for (int i = 1; i <= 6; i++) {\r\n            // Daggers (D)\r\n            deck.add(new Card(\"W\",  \"D\", 5));\r\n        }\r\n        for (int i = 1; i <= 16; i++) {\r\n            // Swords (S)\r\n            deck.add(new Card(\"W\",  \"S\", 10));\r\n        }\r\n        for (int i = 1; i <= 12; i++) {\r\n            // Horses (H)\r\n            deck.add(new Card(\"W\",  \"H\", 10));\r\n        }\r\n        for (int i = 1; i <= 8; i++) {\r\n            // Battle-axes (B)\r\n            deck.add(new Card(\"W\",  \"B\", 15));\r\n        }\r\n        for (int i = 1; i <= 6; i++) {\r\n            // lances (L)\r\n            deck.add(new Card(\"W\",  \"L\", 20));\r\n        }\r\n        for (int i = 1; i <= 2; i++) {\r\n            // Excaliburs (E)\r\n            deck.add(new Card(\"W\",  \"E\", 30));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //Shuffle the deck of cards\r\n    public void shuffleDeck(List<Card> deck) {\r\n        long seed = System.nanoTime();\r\n        Random random = new Random(seed);\r\n        for (int i = deck.size() - 1; i > 0; i--) {\r\n            int j = random.nextInt(i + 1);\r\n            Card temp = deck.get(i);\r\n            deck.set(i, deck.get(j));\r\n            deck.set(j, temp);\r\n        }\r\n    }\r\n\r\n    public void add_all_players(){\r\n        for (int i = 1; i <= 4; i++) {\r\n            players.add(new Player(0, i));\r\n        }\r\n    }\r\n\r\n    public void distributeallCards(){\r\n        for (Player player : players) {\r\n            distributeCards(player, 12);  // Distribute 12 cards to each player\r\n        }\r\n    }\r\n    public void distributeCards(Player player, int numCards) {\r\n        for (int i = 0; i < numCards; i++) {\r\n            if (deck.isEmpty()) {\r\n                reusedDeck();\r\n            }\r\n            player.addToHand(deck.removeLast());\r\n        }\r\n    }\r\n    public void reusedDeck() {\r\n        shuffleDeck(playedCards);\r\n        deck.addAll(playedCards);\r\n        playedCards.clear();\r\n    }\r\n    public void reusedeventDeck() {\r\n        shuffleDeck(played_eventCards);\r\n        event_deck.addAll(played_eventCards);\r\n        played_eventCards.clear();\r\n    }\r\n    public void startGame() {\r\n        scanner = new Scanner(System.in);\r\n        output = new PrintWriter(System.out);\r\n        System.out.println(\"Welcome to the game!\");\r\n        add_all_players();\r\n        initializeDeck();\r\n        initialize_event_Deck();\r\n        shuffleDeck(deck);\r\n        shuffleDeck(event_deck);\r\n        System.out.flush();\r\n\r\n    }\r\n    private boolean isInteger(String str) {\r\n        try {\r\n            Integer.parseInt(str);\r\n            return true;\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n    }\r\n    public boolean Check_input_card(String card){\r\n        if (card.matches(\"[A-Z]\\\\(\\\\d+\\\\)\")) {\r\n            String suit = card.replaceAll(\"([A-Z])\\\\((\\\\d+)\\\\)\", \"$1\");\r\n            int number = Integer.parseInt(card.replaceAll(\"([A-Z])\\\\((\\\\d+)\\\\)\", \"$2\"));\r\n            if (number > 70 || number < 5) return false;\r\n            return switch (suit) {\r\n                case \"S\" -> number == 10;\r\n                case \"H\" -> number == 10;\r\n                case \"D\" -> number == 5;\r\n                case \"B\" -> number == 15;\r\n                case \"L\" -> number == 20;\r\n                case \"E\" -> number == 30;\r\n                case \"F\" ->\r\n                        (number == 5 || number == 10 || number == 15 || number == 20 || number == 25 || number == 30 || number == 35 || number == 40 || number == 50 || number == 70);\r\n                default -> false;\r\n            };\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public void playCard(Scanner scanner, Player player) {\r\n        Displaycard(player, output);\r\n        System.out.println(\"\\n Enter the card you want to draw (e.g. S(10)) or position: \");\r\n        System.out.flush();\r\n        String temp = scanner.nextLine();\r\n        if (!temp.isEmpty() && Check_input_card(temp)){\r\n            String suit = temp.substring(0, 1);\r\n            int value = Integer.parseInt(temp.substring(temp.indexOf(\"(\") + 1, temp.indexOf(\")\")));\r\n            Card c = player.playedCard(suit,value);\r\n            if (c != null) {\r\n                playedCards.add(c);\r\n                System.out.println(\"You removed the card \");\r\n                System.out.print(\" \"+ c.getSuit() + \"(\" + c.getValue() + \")\\n\");\r\n                System.out.flush();\r\n                return;\r\n            } else System.out.print(\"Please enter the card you have \\n\");\r\n        } else if (isInteger(temp)) {\r\n            int position = Integer.parseInt(temp);\r\n            if (position >= 1 && position <= player.getHand().size()) {\r\n                Card c = player.getHand().get(position - 1);\r\n                playedCards.add(c);\r\n                player.getHand().remove(position - 1);\r\n                System.out.println(\"You removed the card: \");\r\n                System.out.println(\" \"+ c.getSuit() + \"(\" + c.getValue() + \")\\n\");\r\n                System.out.flush();\r\n                return;\r\n            } else {\r\n                System.out.println(\"Invalid position. Please enter a valid card position.\");\r\n            }\r\n            Displaycard(player,output);\r\n        } else {\r\n            System.out.print(\"Please enter according to the format again \\n\");\r\n        }\r\n\r\n        System.out.flush();\r\n    }\r\n    public void Displaycard(Player player, PrintWriter output){\r\n        // Display player's hands\r\n        List<Card> temp = new ArrayList<>();\r\n        temp.add(player.getHand().getFirst());\r\n        for (int i = 1; i < player.getHand().size(); i++) {\r\n            Card newcard = player.getHand().get(i);\r\n            for (int j = 0; j < temp.size(); j++) {\r\n                if (newcard.getSuit().equals(\"F\")) {\r\n                    if (!temp.get(j).getSuit().equals(\"F\")) {\r\n                        temp.add(j, newcard);\r\n                        break;\r\n                    } else if (newcard.getValue() <= temp.get(j).getValue() && temp.get(j).getSuit().equals(\"F\")) {\r\n                        temp.add(j, newcard);\r\n                        break;\r\n                    } else if (j == temp.size() - 1) {\r\n                        temp.add(newcard);\r\n                        break;\r\n                    }\r\n                } else if (newcard.getValue() <= temp.get(j).getValue() && !temp.get(j).getSuit().equals(\"F\")) {\r\n                    if (newcard.getSuit().equals(\"H\")) {\r\n                        if (!temp.get(j).getSuit().equals(\"S\") || temp.get(j).getSuit().equals(\"H\")) {\r\n                            temp.add(j, newcard);\r\n                            break;\r\n                        } else if (j == temp.size() - 1) {\r\n                            temp.add(newcard);\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        temp.add(j, newcard);\r\n                        break;\r\n                    }\r\n                } else if (j == temp.size() - 1) {\r\n                    temp.add(newcard);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        output.println(\"\\nP\"+ player.id + \"'s hand:\" + temp.size());\r\n        for (Card card : temp) {\r\n            output.print(\" \"+ card.getSuit() + \"(\" + card.getValue() + \") \");\r\n        }\r\n        output.println();\r\n        player.setHand(temp);\r\n        output.flush();\r\n    }\r\n    public void Displayplayers(PrintWriter output){\r\n        for (Player playersParticipant : players_Participants) {\r\n            output.println(\"P\" + playersParticipant.Get_id() + \" is eligible \");\r\n        }\r\n        output.flush();\r\n    }\r\n    public List<Player>  determineWinner( PrintWriter output) {\r\n        List<Player>  winner = new ArrayList<>();\r\n        for (int i = players.size() - 1; i >= 0; i--) {\r\n            if (players.get(i).Get_shields() >= 7) {\r\n                winner.add(players.get(i));\r\n                System.out.println(\"The winner is: P\" + players.get(i).Get_id());\r\n                System.out.flush();\r\n            }\r\n        }\r\n        return winner;\r\n    }\r\n    public void startRound(Scanner scanner){\r\n        while (determineWinner(output).isEmpty()) {\r\n            System.out.print(\"current player: \" + players.get(current_player_round).Get_id());\r\n            Displaycard(players.get(current_player_round), output);\r\n            draws_event_card(scanner);\r\n            if (stage.length > 0) startQRound(scanner);\r\n            if (sponsor != 100) {\r\n                runQRound(scanner);\r\n            }\r\n            if (current_player != current_player_round) {\r\n                System.out.print(\"current player: \" + players.get(current_player_round).Get_id());\r\n                Displaycard(players.get(current_player_round),output);\r\n                Player currentPlayer = players.get(current_player_round);\r\n                System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n                scanner.nextLine();\r\n            }\r\n            if (current_player_round < players.size()-1) current_player_round++;\r\n            else current_player_round = 0;\r\n            current_player = current_player_round;\r\n            if (event_deck.isEmpty()) {\r\n                reusedeventDeck();\r\n            }\r\n            List<Player> Winner;\r\n            Winner = determineWinner(output);\r\n            if (!Winner.isEmpty()) break;\r\n            clearConsole();\r\n        }\r\n        exit();\r\n    }\r\n    public static void clearConsole() {\r\n        for (int i = 0; i < 10; i++) {\r\n            System.out.println();\r\n        }\r\n    }\r\n    private void exit() {\r\n        System.out.println(\"Exiting game...\");\r\n        scanner.close();\r\n        System.out.close();\r\n    }\r\n    public void draws_event_card(Scanner scanner){\r\n        System.out.println();\r\n        Card event = event_deck.removeLast();\r\n        if (event.getType().equals(\"E\")) {\r\n            if (event.getSuit().equals(\"Pl\")) {\r\n                System.out.println(\"The current player has drawn an Plague card \");\r\n                int shields = players.get(current_player_round).Get_shields();\r\n                if (shields >= 2) {\r\n                    players.get(current_player_round).Set_shields(shields-2);\r\n                    System.out.println(\"The player \"+ players.get(current_player_round).Get_id() +\" draws this card immediately loses 2 \\n\" +\r\n                            \"shields\");\r\n                }\r\n                System.out.flush();\r\n            } else if (event.getSuit().equals(\"Qf\")) {\r\n                System.out.println(\"The current player has drawn an Queen’s favor card\");\r\n                distributeCards(players.get(current_player_round), 2);\r\n                removeCards(scanner, players.get(current_player_round));\r\n            } else {\r\n                System.out.println(\"The current player has drawn an Prosperity card\");\r\n                System.out.flush();\r\n                Player currentPlayer = players.get(current_player);\r\n                System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n                scanner.nextLine();\r\n                clearConsole();\r\n                for (Player player : players) {\r\n                    current_player = player.Get_id() -1;\r\n                    System.out.print(\"current player: \" + players.get(current_player).Get_id());\r\n                    Displaycard(players.get(current_player),output);\r\n                    distributeCards(player, 2);\r\n                    removeCards(scanner, player);\r\n                    currentPlayer = players.get(current_player);\r\n                    System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n                    scanner.nextLine();\r\n                    clearConsole();\r\n                }\r\n            }\r\n        } else {\r\n            int n = event.getValue();\r\n            stage = new int[n];\r\n        }\r\n        played_eventCards.add(event);\r\n        System.out.flush();\r\n    }\r\n    public void start_set_stage(Scanner scanner) {\r\n        int round = 0;\r\n        for (int i = 0; i < stage.length; i++) {\r\n            if (stage[i] == 0) {\r\n                round = i;\r\n                break;\r\n            }\r\n        }\r\n        System.out.println(\"\\n\");\r\n        System.out.println(\"current player: \" + players.get(sponsor).Get_id());\r\n        current_player = sponsor;\r\n        boolean done = true;\r\n        List<Card> stage_card = new ArrayList<>();\r\n        List<Card> stage_card_F = new ArrayList<>();\r\n        while (done) {\r\n            System.out.println(\"stage : \" + (round+1));\r\n            Displaycard(players.get(sponsor),output);\r\n            System.out.println(\"Enter the card you want to play (e.g. S(10)): \");\r\n            System.out.flush();\r\n            String temp = scanner.nextLine();\r\n            if (!temp.isEmpty() && Check_input_card(temp)){\r\n                String suit = temp.substring(0, 1);\r\n                int value = Integer.parseInt(temp.substring(temp.indexOf(\"(\") + 1, temp.indexOf(\")\")));\r\n                int c = hasCard(players.get(sponsor),suit,value);\r\n                if (c != 1111) {\r\n                    if (suit.equals(\"F\")) {\r\n                        if (stage_card_F.isEmpty()) {\r\n                            stage_card_F.add(players.get(sponsor).getHand().get(c));\r\n                        } else {\r\n                            System.out.println(\"Each stage must consist of a single Foe card \\n\");\r\n                        }\r\n                    } else {\r\n                        if (!stage_card.contains(players.get(sponsor).getHand().get(c))) {\r\n                            stage_card.add(players.get(sponsor).getHand().get(c));\r\n                        } else {\r\n                            System.out.println(\"non repeated weapon card \\n\");\r\n                        }\r\n                    }\r\n                    System.out.println(\"The cards used for this stage: \");\r\n                    for (Card card : stage_card) {\r\n                        System.out.print(\" \"+ card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                    }\r\n                    System.out.print(\" \"+ stage_card_F.getFirst().getSuit() + \"(\" + stage_card_F.getFirst().getValue() + \") \");\r\n                    System.out.flush();\r\n                } else System.out.println(\"Please enter the card you have \\n\");\r\n                System.out.flush();\r\n            } else if (isInteger(temp)) {\r\n                int position = Integer.parseInt(temp);\r\n                if (position >= 1 && position <= players.get(sponsor).getHand().size()) {\r\n                    Card c = players.get(sponsor).getHand().get(position - 1);\r\n                    if (c.getSuit().equals(\"F\")) {\r\n                        if (stage_card_F.isEmpty()) {\r\n                            stage_card_F.add(c);\r\n                        } else {\r\n                            System.out.println(\"Each stage must consist of a single Foe card \\n\");\r\n                        }\r\n                    } else {\r\n                        if (!stage_card.contains(c)) {\r\n                            stage_card.add(c);\r\n                        } else {\r\n                            System.out.println(\"non repeated weapon card \\n\");\r\n                        }\r\n                    }\r\n                } else {\r\n                    System.out.println(\"Invalid position. Please enter a valid card position.\");\r\n                }\r\n                System.out.println(\"The cards used for this stage: \");\r\n                for (Card card : stage_card) {\r\n                    System.out.print(\" \"+ card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                }\r\n                System.out.print(\" \"+ stage_card_F.getFirst().getSuit() + \"(\" + stage_card_F.getFirst().getValue() + \") \");\r\n                System.out.flush();\r\n            } else if (temp.contains(\"Quit\")) {\r\n                if (stage_card_F.isEmpty()) {\r\n                    stage_card.clear();\r\n                    System.out.println(\"A stage cannot be empty \\n\");\r\n                }\r\n                else {\r\n                    int value = stage_card_F.getFirst().getValue();\r\n                    for (Card card : stage_card) {\r\n                        value += card.getValue();\r\n                    }\r\n                    if (round == 0) {\r\n                        System.out.println(\"The cards used for this stage: \");\r\n                        for (Card card : stage_card) {\r\n                            System.out.print(\" \"+ card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                            playedCards.add(players.get(sponsor).playedCard(card.getSuit(), card.getValue()));\r\n                        }\r\n                        System.out.print(\" \"+ stage_card_F.getFirst().getSuit() + \"(\" + stage_card_F.getFirst().getValue() + \") \");\r\n                        playedCards.add(players.get(sponsor).playedCard(stage_card_F.getFirst().getSuit(),stage_card_F.getFirst().getValue()));\r\n                        addcard += 1 + stage_card.size();\r\n                        stage[round] = value;\r\n                        done = false;\r\n                    } else if (value > stage[round-1]) {\r\n                        System.out.println(\"The cards used for this stage: \");\r\n                        for (Card card : stage_card) {\r\n                            System.out.print(\" \"+ card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                            playedCards.add(players.get(sponsor).playedCard(card.getSuit(), card.getValue()));\r\n                        }\r\n                        System.out.print(\" \"+ stage_card_F.getFirst().getSuit() + \"(\" + stage_card_F.getFirst().getValue() + \") \");\r\n                        playedCards.add(players.get(sponsor).playedCard(stage_card_F.getFirst().getSuit(),stage_card_F.getFirst().getValue()));\r\n                        addcard += 1 + stage_card.size();\r\n                        stage[round] = value;\r\n                        done = false;\r\n                    } else {\r\n                        stage_card.clear();\r\n                        stage_card_F.clear();\r\n                        System.out.println(\"Insufficient value for this stage \\n\");\r\n                    }\r\n                    System.out.println();\r\n                }\r\n                System.out.flush();\r\n            } else {\r\n                System.out.println(\"Please enter according to the format again \\n\");\r\n            }\r\n            System.out.flush();\r\n        }\r\n        System.out.flush();\r\n        if (stage[stage.length-1] != 0) {\r\n            addcard += stage.length;\r\n            Player currentPlayer = players.get(current_player);\r\n            System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n            scanner.nextLine();\r\n            clearConsole();\r\n        }\r\n    }\r\n    public int hasCard(Player player, String suit, int value) {\r\n        for (int i = 0; i < player.getHand().size(); i++) {\r\n            if (player.getHand().get(i).getSuit().equals(suit) && player.getHand().get(i).getValue() == value) {\r\n                return i;\r\n            }\r\n        }\r\n        return 1111;\r\n\r\n    }\r\n    public void Get_sponsor_ans(Scanner scanner){\r\n        System.out.println(\"current player: \" + players.get(current_player).Get_id());\r\n        Displaycard(players.get(current_player),output);\r\n        System.out.println(\"\\n The game has drawn a Q\" + stage.length + \" card\");\r\n        System.out.flush();\r\n        if (checksponsor(players.get(current_player))) {\r\n            System.out.println(\"\\n Do you want to sponsor the current task? Answer Y or N: \");\r\n            System.out.flush();\r\n            String playerans = scanner.nextLine();\r\n            if (playerans.contains(\"Y\")) {\r\n                System.out.println(\"P\" + players.get(current_player).Get_id() + \" is sponsor \");\r\n                System.out.flush();\r\n                sponsor = current_player;\r\n            }\r\n        } else {\r\n            System.out.println(\"\\n player must NECESSARILY have cards that allow for the construction of a valid quest.\");\r\n            System.out.flush();\r\n        }\r\n        if (sponsor == 100) {\r\n            Player currentPlayer = players.get(current_player);\r\n            System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n            scanner.nextLine();\r\n            clearConsole();\r\n            if (current_player < players.size()-1) current_player++;\r\n            else current_player = 0;\r\n        }\r\n    }\r\n    public void Get_sponsor(Scanner scanner){\r\n        for (int round = 0; round < players.size(); round++) {\r\n            Get_sponsor_ans(scanner);\r\n            if (sponsor != 100) break;\r\n        }\r\n    }\r\n    public void Get_Participants_ans(Scanner scanner) {\r\n        int next_players = current_player;\r\n        for (int i = 0; i < players_Participants.size(); i++) {\r\n            if (next_players == players_Participants.getLast().Get_id()-1) {\r\n                next_players = players_Participants.getFirst().Get_id() -1;\r\n                break;\r\n            } else if (next_players == players_Participants.get(i).Get_id() -1) {\r\n                next_players = players_Participants.get(i+1).Get_id() -1;\r\n                break;\r\n            }\r\n        }\r\n        System.out.println(\"current player: \" + players.get(current_player).Get_id());\r\n        Displaycard(players.get(current_player),output);\r\n        System.out.println(\"\\n Do you want to join the current task? Answer Y: \");\r\n        System.out.flush();\r\n        String playerans = scanner.nextLine();\r\n        if (playerans.equals(\"Y\")) {\r\n            distributeCards(players.get(current_player), 1);\r\n            removeCards(scanner, players.get(current_player));\r\n            Displaycard(players.get(current_player),output);\r\n        } else {\r\n            players_Participants.remove(players.get(current_player));\r\n        }\r\n\r\n        Player currentPlayer = players.get(current_player);\r\n        System.out.println(\"P\" + currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n        scanner.nextLine();\r\n        clearConsole();\r\n        System.out.flush();\r\n        current_player = next_players;\r\n\r\n    }\r\n    public void Get_Participants(Scanner scanner){\r\n        int num = players_Participants.size();\r\n        for (int i = 0; i < num; i++) {\r\n            Get_Participants_ans(scanner);\r\n        }\r\n        if (!players_Participants.isEmpty()) current_player = players_Participants.getFirst().Get_id()-1;\r\n    }\r\n    public boolean checksponsor(Player player) {\r\n        if (player.getHand().size() < stage.length) return false;\r\n        int f = 0;\r\n        for (int i = 0; i < player.getHand().size(); i++) {\r\n            if (player.getHand().get(i).getSuit().equals(\"F\")) {\r\n                f++;\r\n            }\r\n        }\r\n        return f >= stage.length;\r\n    }\r\n    public void start_stage(Scanner scanner) {\r\n        int round = 0;\r\n        for (int i = 0; i < stage.length; i++) {\r\n            if (stage[i] > 0) {\r\n                round = i;\r\n                break;\r\n            }\r\n        }\r\n        int next_players = current_player;\r\n        for (int i = 0; i < players_Participants.size(); i++) {\r\n            if (next_players == players_Participants.getLast().Get_id()-1) {\r\n                next_players = players_Participants.getFirst().Get_id() -1;\r\n                break;\r\n            } else if (next_players == players_Participants.get(i).Get_id() -1) {\r\n                next_players = players_Participants.get(i+1).Get_id() -1;\r\n                break;\r\n            }\r\n        }\r\n        System.out.println(\"current player: \" + players.get(current_player).Get_id());\r\n        boolean done = true;\r\n        while (done) {\r\n            Displaycard(players.get(current_player),output);\r\n            System.out.println();\r\n            System.out.println(\"stage : \" + (round+1));\r\n            System.out.print(\" Enter the card you want to play (e.g. S(10)): \");\r\n            System.out.flush();\r\n            String temp = scanner.nextLine();\r\n            if (!temp.isEmpty() && Check_input_card(temp)){\r\n                String suit = temp.substring(0, 1);\r\n                int value = Integer.parseInt(temp.substring(temp.indexOf(\"(\") + 1, temp.indexOf(\")\")));\r\n                int c = hasCard(players.get(current_player),suit,value);\r\n                if (c != 100) {\r\n                    if (suit.equals(\"F\")) System.out.println(\"Please enter the weapon card you have \\n\");\r\n                    else {\r\n                        if (!players.get(current_player).getAttackValueDeck().contains(players.get(current_player).getHand().get(c))) {\r\n                            players.get(current_player).addToAttackValueDeck(players.get(current_player).getHand().get(c));\r\n                            System.out.println(suit + \"(\" + value + \") \");\r\n                        } else {\r\n                            System.out.println(suit + \"(\" + value + \") \");\r\n                            System.out.println(\"non repeated weapon card \\n\");\r\n                        }\r\n                    }\r\n                } else System.out.println(\"Please enter the card you have \\n\");\r\n                System.out.print(\"\\n The value of the cards used in this stage is \"+ players.get(current_player).calculateAttackValue() + \" : \");\r\n                for (Card card : players.get(current_player).getAttackValueDeck()) {\r\n                    System.out.print(card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                }\r\n                System.out.flush();\r\n            } else if (isInteger(temp)) {\r\n                int position = Integer.parseInt(temp);\r\n                if (position >= 1 && position <= players.get(current_player).getHand().size()) {\r\n                    Card c = players.get(current_player).getHand().get(position - 1);\r\n                    if (c.getSuit().equals(\"F\")) {\r\n                        System.out.println(\"Please enter the weapon card you have \\n\");\r\n                    } else {\r\n                        if (!players.get(current_player).getAttackValueDeck().contains(c)) {\r\n                            players.get(current_player).addToAttackValueDeck(c);\r\n                            System.out.println(c.getSuit() + \"(\" + c.getValue() + \") \");\r\n                        } else {\r\n                            System.out.println(\"non repeated weapon card \\n\");\r\n                        }\r\n                    }\r\n                }\r\n                System.out.print(\"\\n The value of the cards used in this stage is \"+ players.get(current_player).calculateAttackValue() + \" : \");\r\n                for (Card card : players.get(current_player).getAttackValueDeck()) {\r\n                    System.out.print(card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                }\r\n                System.out.flush();\r\n            } else if (temp.contains(\"Quit\")) {\r\n                int value = stage[round];\r\n                if (current_player == players_Participants.getLast().Get_id() -1) {\r\n                    stage[round] = 0;\r\n                }\r\n                if (!players.get(current_player).getAttackValueDeck().isEmpty()) {\r\n                    System.out.print(\"\\n The value of the cards used in this stage is \"+ players.get(current_player).calculateAttackValue() + \" : \");\r\n                    for (Card card : players.get(current_player).getAttackValueDeck()) {\r\n                        System.out.print(card.getSuit() + \"(\" + card.getValue() + \") \");\r\n                        playedCards.add(players.get(current_player).playedCard(card.getSuit(), card.getValue()));\r\n                    }\r\n                    if (players.get(current_player).calculateAttackValue() >= value) {\r\n                        if (round == stage.length-1) {\r\n                            int shields = players.get(current_player).Get_shields();\r\n                            players.get(current_player).Set_shields(shields + stage.length);\r\n                            players_Participants.remove(players.get(current_player));\r\n                        }\r\n                        System.out.println(\"\\n current stage win \\n\");\r\n                    } else {\r\n                        players_Participants.remove(players.get(current_player));\r\n                        System.out.println(\"\\n current stage fail \\n\");\r\n                    }\r\n                } else {\r\n                    players_Participants.remove(players.get(current_player));\r\n                    System.out.println(\"empty set of non repeated weapon cards \\n\");\r\n                }\r\n\r\n                System.out.flush();\r\n                players.get(current_player).cleanAttackValueDeck();\r\n                done = false;\r\n            } else {\r\n                System.out.println(\"Please enter according to the format again \\n\");\r\n            }\r\n            System.out.flush();\r\n        }\r\n        if (current_player != next_players || players_Participants.isEmpty()) {\r\n            Player currentPlayer = players.get(current_player);\r\n            System.out.println(\"P\"+currentPlayer.Get_id() + \", please leave the hot seat. Press <return> to continue...\");\r\n            scanner.nextLine();\r\n            clearConsole();\r\n        }\r\n        current_player = next_players;\r\n    }\r\n    public void setParticipants() {\r\n        players_Participants.addAll(players);\r\n        players_Participants.remove(players.get(sponsor));\r\n        current_player = players_Participants.getFirst().id-1;\r\n    }\r\n    public void set_stage(Scanner scanner) {\r\n        for (int round = 0; round < stage.length; round++) {\r\n            start_set_stage(scanner);\r\n        }\r\n        setParticipants();\r\n    }\r\n    public void startQRound(Scanner scanner){\r\n        Get_sponsor(scanner);\r\n        if (sponsor != 100) {\r\n            set_stage(scanner);\r\n        } else {\r\n            stage = new int[0];\r\n        }\r\n    }\r\n\r\n    public void runQRound(Scanner scanner){\r\n        for (int round = 0; round < stage.length; round++) {\r\n            Displayplayers(output);\r\n            Get_Participants(scanner);\r\n            int num = players_Participants.size();\r\n            for (int i = 0; i < num; i++) {\r\n                start_stage(scanner);\r\n            }\r\n            if (players_Participants.isEmpty()) {\r\n                break;\r\n            }\r\n        }\r\n        endQRound(scanner);\r\n    }\r\n    public void endQRound(Scanner scanner){\r\n\r\n        distributeCards(players.get(sponsor), addcard);\r\n        if (players.get(sponsor).getHand().size() > 12) {\r\n            System.out.println(\"current player: \" + players.get(sponsor).Get_id());\r\n            removeCards(scanner, players.get(sponsor));\r\n        }\r\n        stage = new int[0];\r\n        addcard = 0;\r\n        sponsor = 100;\r\n    }\r\n\r\n    public void removeCards(Scanner scanner, Player player){\r\n        while (player.getHand().size() > 12) {\r\n            System.out.println(\"Player \"+player.Get_id() +\" need remove \"+ (player.getHand().size() - 12) + \" Cards\");\r\n            playCard(scanner, player);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Main.java b/src/main/java/org/example/Main.java
--- a/src/main/java/org/example/Main.java	(revision e42811f93bb706e44c741fdc7b3231dd6fbe4ec5)
+++ b/src/main/java/org/example/Main.java	(date 1731283605771)
@@ -264,37 +264,40 @@
     }
     public List<Player>  determineWinner( PrintWriter output) {
         List<Player>  winner = new ArrayList<>();
-        for (int i = players.size() - 1; i >= 0; i--) {
+        for (int i = 0 ; i < players.size(); i++) {
             if (players.get(i).Get_shields() >= 7) {
                 winner.add(players.get(i));
-                System.out.println("The winner is: P" + players.get(i).Get_id());
-                System.out.flush();
+                output.println("The winner is: P" + players.get(i).Get_id());
+                output.flush();
             }
         }
         return winner;
     }
-    public void startRound(Scanner scanner){
-        while (determineWinner(output).isEmpty()) {
-            System.out.print("current player: " + players.get(current_player_round).Get_id());
-            Displaycard(players.get(current_player_round), output);
-            draws_event_card(scanner);
-            if (stage.length > 0) startQRound(scanner);
-            if (sponsor != 100) {
-                runQRound(scanner);
-            }
-            if (current_player != current_player_round) {
-                System.out.print("current player: " + players.get(current_player_round).Get_id());
-                Displaycard(players.get(current_player_round),output);
-                Player currentPlayer = players.get(current_player_round);
-                System.out.println("P"+currentPlayer.Get_id() + ", please leave the hot seat. Press <return> to continue...");
-                scanner.nextLine();
-            }
-            if (current_player_round < players.size()-1) current_player_round++;
-            else current_player_round = 0;
-            current_player = current_player_round;
-            if (event_deck.isEmpty()) {
-                reusedeventDeck();
+    public void nextRound(Scanner scanner) {
+        if (current_player != current_player_round) {
+            System.out.print("current player: " + players.get(current_player_round).Get_id());
+            Displaycard(players.get(current_player_round),output);
+            Player currentPlayer = players.get(current_player_round);
+            System.out.println("P"+currentPlayer.Get_id() + ", please leave the hot seat. Press <return> to continue...");
+            scanner.nextLine();
+        }
+        if (current_player_round < players.size()-1) current_player_round++;
+        else current_player_round = 0;
+        current_player = current_player_round;
+        if (event_deck.isEmpty()) {
+            reusedeventDeck();
+        }
+    }
+    public void startRound(Scanner scanner){
+        while (determineWinner(output).isEmpty()) {
+            System.out.print("current player: " + players.get(current_player_round).Get_id());
+            Displaycard(players.get(current_player_round), output);
+            draws_event_card(scanner);
+            if (stage.length > 0) startQRound(scanner);
+            if (sponsor != 100) {
+                runQRound(scanner);
             }
+            nextRound(scanner);
             List<Player> Winner;
             Winner = determineWinner(output);
             if (!Winner.isEmpty()) break;
@@ -604,7 +607,9 @@
                 int value = Integer.parseInt(temp.substring(temp.indexOf("(") + 1, temp.indexOf(")")));
                 int c = hasCard(players.get(current_player),suit,value);
                 if (c != 100) {
-                    if (suit.equals("F")) System.out.println("Please enter the weapon card you have \n");
+                    if (suit.equals("F")) {
+                        System.out.println("Please enter the weapon card you have \n");
+                    }
                     else {
                         if (!players.get(current_player).getAttackValueDeck().contains(players.get(current_player).getHand().get(c))) {
                             players.get(current_player).addToAttackValueDeck(players.get(current_player).getHand().get(c));
@@ -655,7 +660,6 @@
                         if (round == stage.length-1) {
                             int shields = players.get(current_player).Get_shields();
                             players.get(current_player).Set_shields(shields + stage.length);
-                            players_Participants.remove(players.get(current_player));
                         }
                         System.out.println("\n current stage win \n");
                     } else {
@@ -666,7 +670,6 @@
                     players_Participants.remove(players.get(current_player));
                     System.out.println("empty set of non repeated weapon cards \n");
                 }
-
                 System.out.flush();
                 players.get(current_player).cleanAttackValueDeck();
                 done = false;
@@ -675,15 +678,19 @@
             }
             System.out.flush();
         }
-        if (current_player != next_players || players_Participants.isEmpty()) {
+        if (current_player != next_players) {
             Player currentPlayer = players.get(current_player);
             System.out.println("P"+currentPlayer.Get_id() + ", please leave the hot seat. Press <return> to continue...");
             scanner.nextLine();
             clearConsole();
+        } else if (players_Participants.isEmpty()) {
+            System.out.println("The quest ends with no winner\n");
         }
         current_player = next_players;
+
     }
     public void setParticipants() {
+        players_Participants.clear();
         players_Participants.addAll(players);
         players_Participants.remove(players.get(sponsor));
         current_player = players_Participants.getFirst().id-1;
@@ -718,7 +725,7 @@
         endQRound(scanner);
     }
     public void endQRound(Scanner scanner){
-
+        current_player = sponsor;
         distributeCards(players.get(sponsor), addcard);
         if (players.get(sponsor).getHand().size() > 12) {
             System.out.println("current player: " + players.get(sponsor).Get_id());
Index: src/test/java/org/example/CucumberStep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport io.cucumber.java.en.*;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.io.PrintWriter;\r\nimport java.io.StringWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport java.util.Scanner;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\n\r\npublic class CucumberStep {\r\n\r\n    private Main newGame;\r\n    private List<Player> players;\r\n\r\n    @Given(\"Start game and decks are created\")\r\n    public void start_game_for_A1() {\r\n        List<Card> cards = new ArrayList<>();\r\n        for (int i = 1; i <= 6; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 10));\r\n        }\r\n        cards.add( new Card(\"F\", \"F\", 15));\r\n        for (int i = 1; i <= 7; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 20));\r\n        }\r\n        for (int i = 1; i <= 7; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 25));\r\n        }\r\n        for (int i = 1; i <= 2; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 30));\r\n        }\r\n        for (int i = 1; i <= 4; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 35));\r\n        }\r\n        for (int i = 1; i <= 2; i++) {\r\n            cards.add( new Card(\"F\", \"F\", 50));\r\n        }\r\n        cards.add( new Card(\"F\", \"F\", 70));\r\n        // Create basic weapon cards: Swords, battle-axes, lances, horses, excaliburs, and daggers\r\n\r\n        cards.add( new Card(\"W\", \"D\", 5));\r\n\r\n        for (int i = 1; i <= 7; i++) {\r\n            // Swords (S)\r\n            cards.add( new Card(\"W\", \"S\", 10));\r\n        }\r\n        for (int i = 1; i <= 4; i++) {\r\n            // Horses (H)\r\n            cards.add( new Card(\"W\", \"H\", 10));\r\n        }\r\n\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        cards.add(new Card(\"F\",  \"F\", 30));\r\n\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        cards.add(new Card(\"F\",  \"F\", 10));\r\n\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"F\",  \"F\", 30));\r\n\r\n        //p4\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"F\", \"F\", 40));\r\n        cards.add(new Card(\"W\",  \"D\", 5));\r\n        cards.add(new Card(\"W\",  \"D\", 5));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        cards.add(new Card(\"W\",  \"E\", 30));\r\n        //p3\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"W\",  \"D\", 5));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        //p2\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"F\", \"F\", 40));\r\n        cards.add(new Card(\"W\",  \"D\", 5));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"E\", 30));\r\n        //p1\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 5));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"F\", \"F\", 15));\r\n        cards.add(new Card(\"W\",  \"D\", 5));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"S\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"H\", 10));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"B\", 15));\r\n        cards.add(new Card(\"W\",  \"L\", 20));\r\n        \r\n        List<Card> event_cards = new ArrayList<>();\r\n        for (int i = 1; i <= 5; i++) {\r\n            if (i == 1) event_cards.add( new Card(\"E\", \"Pl\", 2));\r\n            else if (i <= 1 + 2) event_cards.add( new Card(\"E\", \"Qf\", 2));\r\n            else event_cards.add( new Card(\"E\", \"Pr\", 2));\r\n        }\r\n        // Create quest (Q) cards\r\n        for (int i = 1; i <= 12 - 1; i++) {\r\n            if (i <= 3) event_cards.add( new Card(\"Q\", \"Q\", 2));\r\n            else if (i <= 3 + 4) event_cards.add( new Card(\"Q\", \"Q\", 3));\r\n            else if (i <= 3 + 4 + 3 - 1) event_cards.add( new Card(\"Q\", \"Q\", 4));\r\n            else event_cards.add( new Card(\"Q\", \"Q\", 5));\r\n        }\r\n        event_cards.add(new Card(\"Q\",  \"Q\", 4));\r\n        newGame = new Main();\r\n        newGame.startGame();\r\n        newGame.deck = cards;\r\n        newGame.event_deck = event_cards;\r\n        assertEquals(100, newGame.deck.size());\r\n        assertEquals(17, newGame.event_deck.size());\r\n        newGame.distributeallCards();\r\n        players = new ArrayList<>();\r\n    }\r\n\r\n\r\n    @When(\"P{int} draws a quest of {int} stages\")\r\n    public void p1_draws_a_quest_of_stages(int arg0,  int arg1) {\r\n        newGame.draws_event_card(new Scanner(\"\"));\r\n        assertEquals(arg0 -1, newGame.current_player);\r\n        assertEquals(newGame.played_eventCards.get(0), new Card(\"Q\", \"Q\", arg1));\r\n\r\n    }\r\n\r\n    @Then(\"P{int} is declines to sponsor\")\r\n    public void pIsDeclinesToSponsor(int arg0) {\r\n        newGame.Get_sponsor_ans(new Scanner(\" \\n \\n\"));\r\n        assertEquals(100,newGame.sponsor);\r\n    }\r\n\r\n    @And(\"P{int} is sponsors and builds the {int} stages\")\r\n    public void IsSponsorsAndBuildsTheStages(int arg0, int arg1) {\r\n        newGame.Get_sponsor_ans(new Scanner(\"Y\\n\"));\r\n        assertEquals(arg0 -1,newGame.sponsor);\r\n        newGame.set_stage(new Scanner(\"F(5)\\nH(10)\\nQuit\\nF(15)\\nS(10)\\nQuit\\nF(15)\\nD(5)\\nB(15)\\nQuit\\nF(40)\\nB(15)\\nQuit\\n \\n\"));\r\n        assertArrayEquals(new int[] {15, 25, 35, 55}, newGame.stage);\r\n    }\r\n\r\n\r\n    @Then(\"P{int} is decides to participate and draws {string} discards {string}\")\r\n    public void pIsDecidesToParticipateAndDrawsDiscards(int arg0, String arg1, String arg2) {\r\n        newGame.Get_Participants_ans(new Scanner(String.format(\"Y\\n%s\\n \\n\", arg2)));\r\n        assertEquals(12,newGame.players.get(arg0-1).getHand().size());\r\n\r\n        players.clear();\r\n        for (Player participant : newGame.players_Participants) {\r\n            players.add(new Player(participant));\r\n        }\r\n    }\r\n\r\n    @Then(\"P{int} draws {string} value of {int}\")\r\n    public void pDrawsValueOf(int arg0, String arg1, int arg2) {\r\n        assertEquals(arg0 - 1, newGame.current_player);\r\n\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        PrintStream originalOut = System.out;\r\n        System.setOut(new PrintStream(outputStream));\r\n\r\n        String[] parts = arg1.split(\" \");\r\n        StringBuilder inputBuilder = new StringBuilder();\r\n        for (String part : parts) {\r\n            inputBuilder.append(part).append(\"\\n\");\r\n        }\r\n\r\n        inputBuilder.append(\"Quit\\n \\n\");\r\n        newGame.start_stage(new Scanner(inputBuilder.toString()));\r\n\r\n        System.setOut(originalOut);\r\n        String output = outputStream.toString().trim();\r\n\r\n        assertTrue(output.contains((\"The value of the cards used in this stage is \" + arg2 + \" : \" + arg1).trim()));\r\n    }\r\n\r\n\r\n\r\n    @And(\"{string} participants can go onto the next stage\")\r\n    public void pPPParticipantsCanGoOntoTheNextStage(String arg0) {\r\n        String[] parts = arg0.split(\" \");\r\n        int[] numbers = new int[parts.length];\r\n        for (int i = 0; i < parts.length; i++) {\r\n            numbers[i] = Integer.parseInt(parts[i].replaceAll(\"\\\\D\", \"\"));\r\n            assertEquals(numbers[i],newGame.players_Participants.get(i).Get_id());\r\n        }\r\n    }\r\n\r\n    @And(\"{int} participants discard the cards\")\r\n    public void participantsDiscardTheCards(int arg0) {\r\n        for (int i = 0; i < arg0; i++) {\r\n            if (players.get(i).Get_id() == newGame.players.get(i).Get_id()) {\r\n                assertTrue(newGame.players.get(i).getHand().size() < players.get(i).getHand().size());\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    @Then(\"P{int} is decides to participate and draws {string}\")\r\n    public void pIsDecidesToParticipateAndDraws(int arg0, String arg1) {\r\n        assertEquals(arg0 -1, newGame.current_player);\r\n        StringWriter output = new StringWriter();\r\n\r\n\r\n        newGame.Get_Participants_ans(new Scanner(\"Y\\n \\n\"));\r\n\r\n        newGame.Displaycard(newGame.players.get(arg0 -1),new PrintWriter(output));\r\n\r\n        assertTrue(output.toString().contains(arg1));\r\n\r\n        players.clear();\r\n        for (Player participant : newGame.players_Participants) {\r\n            players.add(new Player(participant));\r\n        }\r\n    }\r\n\r\n\r\n    @And(\"P1 loses and cannot go to the next stage\")\r\n    public void pLosesAndCannotGoToTheNextStage() {\r\n        StringWriter output = new StringWriter();\r\n        assertEquals(0,newGame.players.getFirst().Get_shields());\r\n        newGame.Displaycard(newGame.players.getFirst(),new PrintWriter(output));\r\n        assertTrue(output.toString().contains(\"F(5)  F(10)  F(15)  F(15)  F(30)  H(10)  B(15)  B(15)  L(20)\"));\r\n        assertEquals(9,newGame.players.get(0).getHand().size());\r\n        int num =0;\r\n        for (int i =0; i<newGame.players.size();i++){\r\n            num += newGame.players.get(i).getHand().size();\r\n        }\r\n        assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);\r\n    }\r\n\r\n    @And(\"P4 receives 4 shields\")\r\n    public void pReceivesShields() {\r\n        StringWriter output = new StringWriter();\r\n        assertEquals(4,newGame.players.get(3).Get_shields());\r\n        newGame.Displaycard(newGame.players.get(3),new PrintWriter(output));\r\n        assertTrue(output.toString().contains(\"F(15)  F(15)  F(40)  L(20)\"));\r\n        assertEquals(4,newGame.players.get(3).getHand().size());\r\n        int num =0;\r\n        for (int i =0; i<newGame.players.size();i++){\r\n            num += newGame.players.get(i).getHand().size();\r\n        }\r\n        assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);\r\n    }\r\n\r\n    @And(\"P3 loses and receives no shields\")\r\n    public void pLosesAndReceivesNoShields() {\r\n        StringWriter output = new StringWriter();\r\n        assertEquals(0,newGame.players.get(2).Get_shields());\r\n        newGame.Displaycard(newGame.players.get(2),new PrintWriter(output));\r\n        assertTrue(output.toString().contains(\"F(5)  F(5)  F(15)  F(30)  S(10)\"));\r\n        assertEquals(5,newGame.players.get(2).getHand().size());\r\n        int num =0;\r\n        for (int i =0; i<newGame.players.size();i++){\r\n            num += newGame.players.get(i).getHand().size();\r\n        }\r\n        assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);\r\n    }\r\n\r\n    @Then(\"P{int} discards {int} cards and draws {int} random cards and then has {int} cards\")\r\n    public void pDiscardsCardsAndDrawsRandomCardsAndThenHasCards(int arg0, int arg1, int arg2, int arg3) {\r\n        newGame.endQRound(new Scanner(\"1\\n1\\n1\\n1\\n \\n\"));\r\n        assertEquals(12,newGame.players.get(arg0-1).getHand().size());\r\n        System.out.println(newGame.playedCards.size());\r\n        assertEquals(41,newGame.playedCards.size());\r\n        int num =0;\r\n        for (int i =0; i<newGame.players.size();i++){\r\n            num += newGame.players.get(i).getHand().size();\r\n        }\r\n        assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);\r\n    }\r\n\r\n\r\n//    @And(\"P1 draws a quest of {int} stages\")\r\n//    public void p1_draws_a_quest_of_stages(Integer int1) {\r\n//\r\n//    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/CucumberStep.java b/src/test/java/org/example/CucumberStep.java
--- a/src/test/java/org/example/CucumberStep.java	(revision e42811f93bb706e44c741fdc7b3231dd6fbe4ec5)
+++ b/src/test/java/org/example/CucumberStep.java	(date 1731284229466)
@@ -18,6 +18,7 @@
 
     private Main newGame;
     private List<Player> players;
+    private Player sponsor;
 
     @Given("Start game and decks are created")
     public void start_game_for_A1() {
@@ -144,14 +145,168 @@
         assertEquals(17, newGame.event_deck.size());
         newGame.distributeallCards();
         players = new ArrayList<>();
+        sponsor = new Player(0,100);
+    }
+
+    @Given("A new game is started for 2winner")
+    public void start_game_for_2winner() {
+        List<Card> cards = new ArrayList<>();
+
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 5));
+        for (int i = 1; i <= 6 -1 -1; i++) {
+            cards.add( new Card("F", "F", 10));
+        }
+
+        cards.add( new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 15));
+
+        for (int i = 1; i <= 7 -1 -1; i++) {
+            cards.add( new Card("F", "F", 20));
+        }
+        for (int i = 1; i <= 7; i++) {
+            cards.add( new Card("F", "F", 25));
+        }
+        for (int i = 1; i <= 2; i++) {
+            cards.add( new Card("F", "F", 30));
+        }
+        for (int i = 1; i <= 4; i++) {
+            cards.add( new Card("F", "F", 35));
+        }
+        for (int i = 1; i <= 2; i++) {
+            cards.add( new Card("F", "F", 50));
+        }
+        cards.add( new Card("F", "F", 70));
+        // Create basic weapon cards: Swords, battle-axes, lances, horses, excaliburs, and daggers
+
+        cards.add( new Card("W", "D", 5));
+
+        for (int i = 1; i <= 7 -2 -2; i++) {
+            // Swords (S)
+            cards.add( new Card("W", "S", 10));
+        }
+        for (int i = 1; i <= 4 -2; i++) {
+            // Horses (H)
+            cards.add( new Card("W", "H", 10));
+        }
+
+//        for Q3
+        cards.add( new Card("W", "S", 10));
+        cards.add( new Card("W", "S", 10));
+
+        cards.add( new Card("W", "S", 10));
+        cards.add( new Card("W", "S", 10));
+
+        cards.add( new Card("W", "H", 10));
+        cards.add( new Card("W", "H", 10));
+
+//        for Q4
+        cards.add(new Card("W",  "L", 20));
+        cards.add(new Card("F",  "F", 30));
+
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "B", 15));
+
+        cards.add(new Card("W",  "L", 20));
+        cards.add(new Card("W",  "L", 20));
+        cards.add(new Card("F",  "F", 10));
+
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("F",  "F", 30));
+
+        //p4
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 40));
+
+        cards.add(new Card("W",  "D", 5));
+        cards.add(new Card("W",  "D", 5));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "L", 20));
+        cards.add(new Card("W",  "E", 30));
+        //p3
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 10));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 20));
+
+        cards.add(new Card("W",  "D", 5));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "L", 20));
+
+        //p2
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 40));
+
+        cards.add(new Card("W",  "D", 5));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "L", 20));
+
+        //p1
+        cards.add(new Card("F", "F", 5));
+        cards.add(new Card("F", "F", 10));
+        cards.add(new Card("F", "F", 15));
+        cards.add(new Card("F", "F", 20));
+
+        cards.add(new Card("W",  "D", 5));
+        cards.add(new Card("W",  "S", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "H", 10));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "B", 15));
+        cards.add(new Card("W",  "E", 30));
+
+        List<Card> event_cards = new ArrayList<>();
+        for (int i = 1; i <= 5; i++) {
+            if (i == 1) event_cards.add( new Card("E", "Pl", 2));
+            else if (i <= 1 + 2) event_cards.add( new Card("E", "Qf", 2));
+            else event_cards.add( new Card("E", "Pr", 2));
+        }
+        // Create quest (Q) cards
+        for (int i = 1; i <= 12 - 1 - 1; i++) {
+            if (i <= 3) event_cards.add( new Card("Q", "Q", 2));
+            else if (i <= 3 + 4 - 1) event_cards.add( new Card("Q", "Q", 3));
+            else if (i <= 3 + 4 + 3 - 1) event_cards.add( new Card("Q", "Q", 4));
+            else event_cards.add( new Card("Q", "Q", 5));
+        }
+        event_cards.add(new Card("Q",  "Q", 3));
+        event_cards.add(new Card("Q",  "Q", 4));
+        newGame = new Main();
+        newGame.startGame();
+        newGame.deck = cards;
+        newGame.event_deck = event_cards;
+        assertEquals(100, newGame.deck.size());
+        assertEquals(17, newGame.event_deck.size());
+        newGame.distributeallCards();
+        players = new ArrayList<>();
+        sponsor = new Player(0,100);
     }
 
 
     @When("P{int} draws a quest of {int} stages")
-    public void p1_draws_a_quest_of_stages(int arg0,  int arg1) {
+    public void p_draws_a_quest_of_stages(int arg0,  int arg1) {
         newGame.draws_event_card(new Scanner(""));
         assertEquals(arg0 -1, newGame.current_player);
-        assertEquals(newGame.played_eventCards.get(0), new Card("Q", "Q", arg1));
+        assertEquals(newGame.played_eventCards.getLast(), new Card("Q", "Q", arg1));
 
     }
 
@@ -161,12 +316,14 @@
         assertEquals(100,newGame.sponsor);
     }
 
-    @And("P{int} is sponsors and builds the {int} stages")
-    public void IsSponsorsAndBuildsTheStages(int arg0, int arg1) {
+    @And("P2 is sponsors and builds the 4 stages for A1 scenario")
+    public void IsSponsorsAndBuildsTheStages() {
         newGame.Get_sponsor_ans(new Scanner("Y\n"));
-        assertEquals(arg0 -1,newGame.sponsor);
+        assertEquals(1,newGame.sponsor);
+        sponsor = new Player(newGame.players.get(newGame.sponsor));
         newGame.set_stage(new Scanner("F(5)\nH(10)\nQuit\nF(15)\nS(10)\nQuit\nF(15)\nD(5)\nB(15)\nQuit\nF(40)\nB(15)\nQuit\n \n"));
         assertArrayEquals(new int[] {15, 25, 35, 55}, newGame.stage);
+
     }
 
 
@@ -200,7 +357,6 @@
 
         System.setOut(originalOut);
         String output = outputStream.toString().trim();
-
         assertTrue(output.contains(("The value of the cards used in this stage is " + arg2 + " : " + arg1).trim()));
     }
 
@@ -218,12 +374,15 @@
 
     @And("{int} participants discard the cards")
     public void participantsDiscardTheCards(int arg0) {
-        for (int i = 0; i < arg0; i++) {
-            if (players.get(i).Get_id() == newGame.players.get(i).Get_id()) {
-                assertTrue(newGame.players.get(i).getHand().size() < players.get(i).getHand().size());
+        int num =0;
+        for (int j = 0; j < newGame.players.size(); j++) {
+            for (int i = 0; i < players.size(); i++) {
+                if (players.get(i).Get_id() == newGame.players.get(j).Get_id()) {
+                    if (newGame.players.get(j).getHand().size() < players.get(i).getHand().size()) num++;
+                }
             }
-
         }
+        assertEquals(arg0, num);
     }
 
     @Then("P{int} is decides to participate and draws {string}")
@@ -259,27 +418,56 @@
         assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);
     }
 
-    @And("P4 receives 4 shields")
-    public void pReceivesShields() {
+    @And("P{int} receives {int} shields")
+    public void pReceivesShields(int arg0, int arg1) {
+        boolean flag = false;
+        for (int i =0; i<newGame.players_Participants.size();i++){
+            if (newGame.players_Participants.get(i).Get_id() == arg0) {
+                flag = true;
+            }
+        }
+        assertTrue(flag);
+        for (int j = 0; j < newGame.players.size(); j++) {
+            for (int i = 0; i < players.size(); i++) {
+                if (players.get(i).Get_id() == newGame.players.get(j).Get_id() && players.get(i).Get_id() == arg0) {
+                    assertEquals(arg1,newGame.players.get(j).Get_shields() - players.get(i).Get_shields());
+                }
+            }
+        }
+
+    }
+
+    @And("P{int} loses and receives no shields")
+    public void pLosesAndReceivesNoShields(int arg0) {
+        for (int j = 0; j < newGame.players.size(); j++) {
+            for (int i = 0; i < players.size(); i++) {
+                if (players.get(i).Get_id() == newGame.players.get(j).Get_id() && players.get(i).Get_id() == arg0) {
+                    assertEquals(0,newGame.players.get(j).Get_shields() - players.get(i).Get_shields());
+                }
+            }
+        }
+
+        boolean flag = true;
+        for (int i =0; i<newGame.players_Participants.size();i++){
+            if (newGame.players_Participants.get(i).Get_id() == 2) {
+                flag = false;
+            }
+        }
+        assertTrue(flag);
+
+    }
+    @And("All 2 participants discard the cards")
+    public void allParticipantsDiscardTheCards() {
         StringWriter output = new StringWriter();
+        assertEquals(0,newGame.players.get(2).Get_shields());
+        newGame.Displaycard(newGame.players.get(2),new PrintWriter(output));
+        assertTrue(output.toString().contains("F(5)  F(5)  F(15)  F(30)  S(10)"));
+
         assertEquals(4,newGame.players.get(3).Get_shields());
         newGame.Displaycard(newGame.players.get(3),new PrintWriter(output));
         assertTrue(output.toString().contains("F(15)  F(15)  F(40)  L(20)"));
         assertEquals(4,newGame.players.get(3).getHand().size());
-        int num =0;
-        for (int i =0; i<newGame.players.size();i++){
-            num += newGame.players.get(i).getHand().size();
-        }
-        assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);
-    }
-
-    @And("P3 loses and receives no shields")
-    public void pLosesAndReceivesNoShields() {
-        StringWriter output = new StringWriter();
-        assertEquals(0,newGame.players.get(2).Get_shields());
-        newGame.Displaycard(newGame.players.get(2),new PrintWriter(output));
-        assertTrue(output.toString().contains("F(5)  F(5)  F(15)  F(30)  S(10)"));
-        assertEquals(5,newGame.players.get(2).getHand().size());
+
         int num =0;
         for (int i =0; i<newGame.players.size();i++){
             num += newGame.players.get(i).getHand().size();
@@ -289,15 +477,119 @@
 
     @Then("P{int} discards {int} cards and draws {int} random cards and then has {int} cards")
     public void pDiscardsCardsAndDrawsRandomCardsAndThenHasCards(int arg0, int arg1, int arg2, int arg3) {
-        newGame.endQRound(new Scanner("1\n1\n1\n1\n \n"));
+
+        assertEquals(sponsor.getHand().size() - arg1,newGame.players.get(arg0-1).getHand().size());
+
+        StringBuilder inputBuilder = new StringBuilder();
+        for (int i = 0; i < arg2; i++) {
+            inputBuilder.append(1).append("\n");
+        }
+        inputBuilder.append(" \n");
+
+        newGame.endQRound(new Scanner(inputBuilder.toString()));
         assertEquals(12,newGame.players.get(arg0-1).getHand().size());
         System.out.println(newGame.playedCards.size());
-        assertEquals(41,newGame.playedCards.size());
+//        assertEquals(41,newGame.playedCards.size());
         int num =0;
         for (int i =0; i<newGame.players.size();i++){
             num += newGame.players.get(i).getHand().size();
         }
         assertEquals(100,newGame.playedCards.size() + newGame.deck.size() + num);
+
+        newGame.nextRound(new Scanner(" \n"));
+    }
+
+//    @Then("P1 is sponsors and builds the 4 stages")
+//    public void pIsSponsorsAndBuildsTheStages() {
+//        newGame.startQRound(new Scanner("Y\nF(5)\nQuit\nF(10)\nQuit\nF(15)\nQuit\nF(20)\nQuit\n \n"));
+//        assertEquals(0,newGame.sponsor);
+//        assertArrayEquals(new int[] {5, 10, 15, 20}, newGame.stage);
+//    }
+
+    @And("{string} loses and cannot go to the next stage")
+    public void losesAndCannotGoToTheNextStage(String arg0) {
+        String[] parts = arg0.split(" ");
+        int[] numbers = new int[parts.length];
+        for (int i = 0; i < parts.length; i++) {
+            numbers[i] = Integer.parseInt(parts[i].replaceAll("\\D", ""));
+        }
+        boolean flag = true;
+        for (int j =0; j<newGame.players_Participants.size();j++){
+            for (int i = 0; i < parts.length; i++) {
+                if (newGame.players_Participants.get(j).Get_id() == numbers[i]) {
+                    flag = false;
+                }
+            }
+        }
+        assertTrue(flag);
+    }
+    @And("P{int} is sponsors and builds the {int} stages")
+    public void pIsSponsorsAndBuildsTheStages(int arg0, int arg1) {
+
+        sponsor = new Player(newGame.players.get(arg0 -1));
+
+        StringBuilder inputBuilder = new StringBuilder();
+        inputBuilder.append("Y\n");
+        int[] value = new int[arg1];
+        int num = 1;
+        for (int i = 0; i < arg1; i++) {
+            if (i > 0) value[i] = value[i-1] + 5;
+            else value[i] = 5;
+            inputBuilder.append(num).append("\n");
+            inputBuilder.append("Quit\n");
+        }
+        inputBuilder.append(" \n");
+        newGame.startQRound(new Scanner(inputBuilder.toString()));
+        assertEquals(arg0-1,newGame.sponsor);
+        assertArrayEquals(value, newGame.stage);
+
+    }
+
+    @Then("P{int} declines to participate")
+    public void pDeclinesToParticipate(int arg0) {
+        newGame.Get_Participants_ans(new Scanner(" \n \n"));
+
+        boolean flag = true;
+        for (int j =0; j<newGame.players_Participants.size();j++){
+            if (newGame.players_Participants.get(j).Get_id() == arg0) {
+                flag = false;
+            }
+        }
+        assertTrue(flag);
+    }
+    @And("{string} are declared winners")
+    public void areDeclaredWinners(String arg0) {
+        StringWriter output = new StringWriter();
+        newGame.determineWinner(new PrintWriter(output));
+
+        String[] parts = arg0.split(" ");
+        int[] numbers = new int[parts.length];
+        for (int i = 0; i < parts.length; i++) {
+            numbers[i] = Integer.parseInt(parts[i].replaceAll("\\D", ""));
+            assertTrue(output.toString().contains("The winner is: P4"));
+        }
+    }
+
+    @And("P{int} draws {string} and {string}")
+    public void pDrawsAnd(int arg0, String arg1, String arg2) {
+        assertEquals(arg0 - 1, newGame.current_player);
+
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        PrintStream originalOut = System.out;
+        System.setOut(new PrintStream(outputStream));
+
+        String[] parts = arg1.split(" ");
+        StringBuilder inputBuilder = new StringBuilder();
+        for (String part : parts) {
+            inputBuilder.append(part).append("\n");
+        }
+
+        inputBuilder.append("Quit\n \n");
+        newGame.start_stage(new Scanner(inputBuilder.toString()));
+
+        System.setOut(originalOut);
+        String output = outputStream.toString().trim();
+        assertTrue(output.contains(arg2.trim()));
     }
 
 
Index: src/test/resources/A2_Tests.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nFeature: A2 Assignment\r\n  Scenario: A1 scenario\r\n    Given Start game and decks are created\r\n    When P1 draws a quest of 4 stages\r\n    Then P1 is declines to sponsor\r\n    And P2 is sponsors and builds the 4 stages\r\n#    Stage 1:\r\n    Then P1 is decides to participate and draws \"F(30)\" discards \"F(5)\"\r\n    And P3 is decides to participate and draws \"S(10)\" discards \"F(5)\"\r\n    And P4 is decides to participate and draws \"B(15)\" discards \"F(5)\"\r\n    Then P1 draws \"D(5) S(10)\" value of 15\r\n    And P3 draws \"S(10) D(5)\" value of 15\r\n    And P4 draws \"D(5) H(10)\" value of 15\r\n    And \"P1 P3 P4\" participants can go onto the next stage\r\n    And 3 participants discard the cards\r\n#    Stage 2:\r\n    Then P1 is decides to participate and draws \"F(10)\"\r\n    And P3 is decides to participate and draws \"L(20)\"\r\n    And P4 is decides to participate and draws \"L(20)\"\r\n    Then P1 draws \"H(10) S(10)\" value of 20\r\n    And P3 draws \"B(15) S(10)\" value of 25\r\n    And P4 draws \"H(10) B(15)\" value of 25\r\n    And \"P3 P4\" participants can go onto the next stage\r\n    And P1 loses and cannot go to the next stage\r\n    And 3 participants discard the cards\r\n#    Stage 3:\r\n    Then P3 is decides to participate and draws \"B(15)\"\r\n    And P4 is decides to participate and draws \"S(10)\"\r\n    Then P3 draws \"L(20) H(10) S(10)\" value of 40\r\n    And P4 draws \"B(15) S(10) L(20)\" value of 45\r\n    And \"P3 P4\" participants can go onto the next stage\r\n    And 2 participants discard the cards\r\n#    Stage 4:\r\n    Then P3 is decides to participate and draws \"F(30)\"\r\n    And P4 is decides to participate and draws \"L(20)\"\r\n    Then P3 draws \"B(15) H(10) L(20)\" value of 45\r\n    And P4 draws \"D(5) S(10) L(20) E(30)\" value of 65\r\n    And P4 receives 4 shields\r\n    And P3 loses and receives no shields\r\n    And 2 participants discard the cards\r\n\r\n    Then P2 discards 9 cards and draws 13 random cards and then has 12 cards\r\n\r\n  Scenario: 2winner_game_2winner_quest\r\n#\r\n#  P1 draws a 4-stage quest and decides to sponsor it.\r\n#  P1 builds 4 stages, the first of\r\n#  which only has a foe and no weapon.\r\n#  • P2, P3 and P4 par@cipate in stage 1 and build their aOack.\r\n#  • P2 and P4 have their aOack win over this stage, whereas P3 loses.\r\n#  • P2 and P4 par@cipate in and win stages 2, then 3 and then 4.\r\n#  • P2 and P4 each earn 4 shields.\r\n#  • P2 draws a 3 stage quest and declines to sponsor it. P3 sponsors this quest and\r\n#  builds its stages.\r\n#  • P1 declines to par@cipate.\r\n#  • P2 and P4 par@cipate in and win stages 1, 2 and 3.\r\n#  • P2 and P4 each earn 3 shields and both are declared (and asserted as) winners.\r\n\r\n\r\n  Scenario: 1winner_game_with_events\r\n\r\n#  P1 draws a 4 stage quest and decides to sponsor it. P1 builds 4 stages\r\n#  • P2, P3 and P4 par@cipate in and win all stages.\r\n#  • P2, P3 and P4 each earn 4 shields\r\n#  • P2 draws ‘Plague’ and loses 2 shields\r\n#  • P3 draws ‘Prosperity’: All 4 players receive 2 adventure cards\r\n#  • P4 draws ‘Queen’s favor’ and thus draws 2 adventure cards\r\n#  • P1 draws a 3 stage quest and decides to sponsor it. P1 builds 3 stages\r\n#  • P2, P3 and P4 par@cipate in stage 1. P2 and P3 win, whereas P4 loses.\r\n#  • P2 and P3 par@cipate in and win stages 2 and 3\r\n#  • P2 and P3 earn 3 shields: P3 is declared (and asserted as) the winner\r\n  Scenario: 0_winner_quest\r\n#  P1 draws a 2 stage quest and decides to sponsor it. P1 builds 2 stages\r\n#  • P2, P3 and P4 par@cipate in stage 1 and all lose stage 1!\r\n#  • The quest ends with no winner but P1 does discards and draws. (Here you need to\r\n#  figure out what to assert to confirm this outcome J.)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/A2_Tests.feature b/src/test/resources/A2_Tests.feature
--- a/src/test/resources/A2_Tests.feature	(revision e42811f93bb706e44c741fdc7b3231dd6fbe4ec5)
+++ b/src/test/resources/A2_Tests.feature	(date 1731283625498)
@@ -4,7 +4,7 @@
     Given Start game and decks are created
     When P1 draws a quest of 4 stages
     Then P1 is declines to sponsor
-    And P2 is sponsors and builds the 4 stages
+    And P2 is sponsors and builds the 4 stages for A1 scenario
 #    Stage 1:
     Then P1 is decides to participate and draws "F(30)" discards "F(5)"
     And P3 is decides to participate and draws "S(10)" discards "F(5)"
@@ -21,8 +21,8 @@
     Then P1 draws "H(10) S(10)" value of 20
     And P3 draws "B(15) S(10)" value of 25
     And P4 draws "H(10) B(15)" value of 25
-    And "P3 P4" participants can go onto the next stage
     And P1 loses and cannot go to the next stage
+    And "P3 P4" participants can go onto the next stage
     And 3 participants discard the cards
 #    Stage 3:
     Then P3 is decides to participate and draws "B(15)"
@@ -36,14 +36,82 @@
     And P4 is decides to participate and draws "L(20)"
     Then P3 draws "B(15) H(10) L(20)" value of 45
     And P4 draws "D(5) S(10) L(20) E(30)" value of 65
-    And P4 receives 4 shields
     And P3 loses and receives no shields
-    And 2 participants discard the cards
+    And P4 receives 4 shields
+    And All 2 participants discard the cards
 
     Then P2 discards 9 cards and draws 13 random cards and then has 12 cards
 
   Scenario: 2winner_game_2winner_quest
-#
+    Given A new game is started for 2winner
+    When P1 draws a quest of 4 stages
+    Then P1 is sponsors and builds the 4 stages
+#    Stage 1:
+    Then P2 is decides to participate and draws "F(30)" discards "F(5)"
+    And P3 is decides to participate and draws "S(10)" discards "F(20)"
+    And P4 is decides to participate and draws "B(15)" discards "F(5)"
+    Then P2 draws "D(5)" value of 5
+    And P3 draws "F(20)" and "empty set of non repeated weapon cards"
+    And P4 draws "D(5)" value of 5
+    And "P3" loses and cannot go to the next stage
+    And "P2 P4" participants can go onto the next stage
+    And 2 participants discard the cards
+#    Stage 2:
+    Then P2 is decides to participate and draws "F(10)"
+    And P4 is decides to participate and draws "L(20)"
+    Then P2 draws "H(10)" value of 10
+    And P4 draws "H(10)" value of 10
+    And "P2 P4" participants can go onto the next stage
+    And 2 participants discard the cards
+#    Stage 3:
+    Then P2 is decides to participate and draws "B(15)"
+    And P4 is decides to participate and draws "S(10)"
+    Then P2 draws "B(15)" value of 15
+    And P4 draws "B(15)" value of 15
+    And "P2 P4" participants can go onto the next stage
+    And 2 participants discard the cards
+#    Stage 4:
+    Then P2 is decides to participate and draws "F(30)"
+    And P4 is decides to participate and draws "L(20)"
+    Then P2 draws "L(20)" value of 20
+    And P4 draws "L(20)" value of 20
+    And P2 receives 4 shields
+    And P4 receives 4 shields
+    And 2 participants discard the cards
+
+    Then P1 discards 4 cards and draws 8 random cards and then has 12 cards
+
+    Then P2 draws a quest of 3 stages
+    Then P2 is declines to sponsor
+    And P3 is sponsors and builds the 3 stages
+#    Stage 1:
+    Then P1 declines to participate
+    And P2 is decides to participate and draws "H(10)"
+    And P4 is decides to participate and draws "H(10)"
+    Then P2 draws "S(10)" value of 10
+    And P4 draws "H(10)" value of 10
+    And "P2 P4" participants can go onto the next stage
+    And 2 participants discard the cards
+#    Stage 2:
+    Then P2 is decides to participate and draws "S(10)"
+    And P4 is decides to participate and draws "S(10)"
+    Then P2 draws "S(10)" value of 10
+    And P4 draws "S(10)" value of 10
+    And "P2 P4" participants can go onto the next stage
+    And 2 participants discard the cards
+#    Stage 3:
+    Then P2 is decides to participate and draws "S(10)"
+    And P4 is decides to participate and draws "S(10)"
+    Then P2 draws "B(15)" value of 15
+    And P4 draws "B(15)" value of 15
+    And P2 receives 3 shields
+    And P4 receives 3 shields
+    And 2 participants discard the cards
+
+    Then P3 discards 3 cards and draws 6 random cards and then has 12 cards
+    And "P2 P4" are declared winners
+
+
 #  P1 draws a 4-stage quest and decides to sponsor it.
 #  P1 builds 4 stages, the first of
 #  which only has a foe and no weapon.
@@ -58,7 +126,7 @@
 #  • P2 and P4 each earn 3 shields and both are declared (and asserted as) winners.
 
 
-  Scenario: 1winner_game_with_events
+#  Scenario: 1winner_game_with_events
 
 #  P1 draws a 4 stage quest and decides to sponsor it. P1 builds 4 stages
 #  • P2, P3 and P4 par@cipate in and win all stages.
@@ -70,7 +138,22 @@
 #  • P2, P3 and P4 par@cipate in stage 1. P2 and P3 win, whereas P4 loses.
 #  • P2 and P3 par@cipate in and win stages 2 and 3
 #  • P2 and P3 earn 3 shields: P3 is declared (and asserted as) the winner
-  Scenario: 0_winner_quest
+#  Scenario: 0_winner_quest
+#    Given A new game is started
+#    When P1 draws a quest of 2 stages
+#    Then P1 is sponsors and builds the 2 stages
+##    Stage 1:
+#    Then P2 is decides to participate and draws "F(30)" discards "F(5)"
+#    And P3 is decides to participate and draws "S(10)" discards "F(5)"
+#    And P4 is decides to participate and draws "B(15)" discards "F(5)"
+#    Then P2 draws " " value of 15
+#    And P3 draws " " value of 0
+#    And P4 draws " " value of 15
+#    And "P2" loses and cannot go to the next stage
+#    And "P3" loses and cannot go to the next stage
+#    And "P4" loses and cannot go to the next stage
+#    And 3 participants discard the cards
+
 #  P1 draws a 2 stage quest and decides to sponsor it. P1 builds 2 stages
 #  • P2, P3 and P4 par@cipate in stage 1 and all lose stage 1!
 #  • The quest ends with no winner but P1 does discards and draws. (Here you need to
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"13b5f6a1-645a-4dfa-830d-7a2ea44d2ffb\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n<<<<<<< Updated upstream\r\n=======\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Player.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Player.java\" afterDir=\"false\" />\r\n>>>>>>> Stashed changes\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <favorite-branches>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"LOCAL\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"A2\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </favorite-branches>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n<<<<<<< Updated upstream\r\n        <entry key=\"$PROJECT_DIR$\" value=\"A2\" />\r\n=======\r\n        <entry key=\"$PROJECT_DIR$\" value=\"A2-Zhang-Lanyue-101192831\" />\r\n>>>>>>> Stashed changes\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nDADtMcuOXRf8zhT1oCtq8QoIt\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n<<<<<<< Updated upstream\r\n    &quot;JUnit.AcceptanceTest.executor&quot;: &quot;Run&quot;,\r\n=======\r\n    &quot;Cucumber Java.Scenario: .executor&quot;: &quot;Run&quot;,\r\n    &quot;Cucumber Java.Scenario: A1 scenario.executor&quot;: &quot;Run&quot;,\r\n    &quot;Cucumber Java.Scenario: A1_scenario.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.AcceptanceTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.CucumberStep.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.CucumberStep.rig_a_new_game_of_blackjack_starts.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.MainTest.RESP_06_test_01.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.MainTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.RunCucumberTest.executor&quot;: &quot;Run&quot;,\r\n>>>>>>> Stashed changes\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;A2-test&quot;,\r\n<<<<<<< Updated upstream\r\n=======\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n>>>>>>> Stashed changes\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;D:/下载/COMP4004/A1-4004/src/main/java/org/example/Main.java&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n<<<<<<< Updated upstream\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n=======\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.general&quot;\r\n>>>>>>> Stashed changes\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"org.example\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.RunCucumberTest\">\r\n    <configuration name=\"Scenario: A1 scenario\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/A2_Tests.feature\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"A1-4004\" />\r\n      <option name=\"NAME_FILTER\" value=\"^A1 scenario$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^A1 scenario$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: A1 scenario\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scenario: A1_scenario\" type=\"CucumberJavaRunConfigurationType\" factoryName=\"Cucumber java\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"CUCUMBER_CORE_VERSION\" value=\"5\" />\r\n      <option name=\"FILE_PATH\" value=\"$PROJECT_DIR$/src/test/resources/A2_Tests.feature\" />\r\n      <option name=\"GLUE\" value=\"org.example\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"io.cucumber.core.cli.Main\" />\r\n      <module name=\"A1-4004\" />\r\n      <option name=\"NAME_FILTER\" value=\"^A1_scenario$\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^A1_scenario$&quot;\" />\r\n      <option name=\"SUGGESTED_NAME\" value=\"Scenario: A1_scenario\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$MODULE_WORKING_DIR$\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"io.cucumber.core.cli.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CucumberStep.rig_a_new_game_of_blackjack_starts\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"A1-4004\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.example.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"org.example\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.CucumberStep\" />\r\n      <option name=\"METHOD_NAME\" value=\"rig_a_new_game_of_blackjack_starts\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainTest.RESP_06_test_01\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"A1-4004\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.example.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"org.example\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.MainTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"RESP_06_test_01\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"RunCucumberTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"A1-4004\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.example.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"org.example\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.RunCucumberTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"A1-Zhang-Lanyue-101192831\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"A1-Zhang-Lanyue-101192831\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"A1-Zhang-Lanyue-101192831\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Tox\" factoryName=\"Tox\">\r\n      <module name=\"A1-Zhang-Lanyue-101192831\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n<<<<<<< Updated upstream\r\n        <item itemvalue=\"JUnit.MainTest.RESP_08_test_03\" />\r\n        <item itemvalue=\"JUnit.MainTest.RESP_07_test_01\" />\r\n        <item itemvalue=\"JUnit.MainTest.RESP_08_test_03\" />\r\n        <item itemvalue=\"JUnit.MainTest.RESP_07_test_01\" />\r\n        <item itemvalue=\"JUnit.MainTest.RESP_07_test_01\" />\r\n=======\r\n        <item itemvalue=\"JUnit.RunCucumberTest\" />\r\n        <item itemvalue=\"JUnit.MainTest.RESP_06_test_01\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: A1 scenario\" />\r\n        <item itemvalue=\"JUnit.CucumberStep.rig_a_new_game_of_blackjack_starts\" />\r\n        <item itemvalue=\"Cucumber Java.Scenario: A1_scenario\" />\r\n>>>>>>> Stashed changes\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"13b5f6a1-645a-4dfa-830d-7a2ea44d2ffb\" name=\"Changes\" comment=\"\" />\r\n      <created>1728497157860</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728497157860</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/Player.java</url>\r\n          <line>16</line>\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/A1_Zhang_Lanyue_101192831$Scenario__A1_scenario.ic\" NAME=\"Scenario: A1_scenario 覆盖结果\" MODIFIED=\"1730926822071\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"true\">\r\n      <FILTER>io.cucumber.core.cli.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e42811f93bb706e44c741fdc7b3231dd6fbe4ec5)
+++ b/.idea/workspace.xml	(date 1731236081484)
@@ -5,13 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="13b5f6a1-645a-4dfa-830d-7a2ea44d2ffb" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-<<<<<<< Updated upstream
-=======
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Player.java" afterDir="false" />
->>>>>>> Stashed changes
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/example/CucumberStep.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/example/CucumberStep.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/resources/A2_Tests.feature" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/resources/A2_Tests.feature" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -27,26 +24,9 @@
     </option>
   </component>
   <component name="Git.Settings">
-    <favorite-branches>
-      <branch-storage>
-        <map>
-          <entry type="LOCAL">
-            <value>
-              <list>
-                <branch-info repo="$PROJECT_DIR$" source="A2" />
-              </list>
-            </value>
-          </entry>
-        </map>
-      </branch-storage>
-    </favorite-branches>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-<<<<<<< Updated upstream
-        <entry key="$PROJECT_DIR$" value="A2" />
-=======
-        <entry key="$PROJECT_DIR$" value="A2-Zhang-Lanyue-101192831" />
->>>>>>> Stashed changes
+        <entry key="$PROJECT_DIR$" value="A2-test-1" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -55,49 +35,26 @@
     <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 1
-}</component>
+    &quot;associatedIndex&quot;: 1
+    }</component>
   <component name="ProjectId" id="2nDADtMcuOXRf8zhT1oCtq8QoIt" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-<<<<<<< Updated upstream
-    &quot;JUnit.AcceptanceTest.executor&quot;: &quot;Run&quot;,
-=======
-    &quot;Cucumber Java.Scenario: .executor&quot;: &quot;Run&quot;,
-    &quot;Cucumber Java.Scenario: A1 scenario.executor&quot;: &quot;Run&quot;,
-    &quot;Cucumber Java.Scenario: A1_scenario.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.AcceptanceTest.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.CucumberStep.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.CucumberStep.rig_a_new_game_of_blackjack_starts.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.MainTest.RESP_06_test_01.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.MainTest.executor&quot;: &quot;Run&quot;,
-    &quot;JUnit.RunCucumberTest.executor&quot;: &quot;Run&quot;,
->>>>>>> Stashed changes
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;A2-test&quot;,
-<<<<<<< Updated upstream
-=======
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
->>>>>>> Stashed changes
-    &quot;onboarding.tips.debug.path&quot;: &quot;D:/下载/COMP4004/A1-4004/src/main/java/org/example/Main.java&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
-<<<<<<< Updated upstream
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
-=======
-    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.general&quot;
->>>>>>> Stashed changes
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "JUnit.RunCucumberTest.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
+    "git-widget-placeholder": "test-1",
+    "kotlin-language-version-configured": "true",
+    "onboarding.tips.debug.path": "D:/下载/COMP4004/A1-4004/src/main/java/org/example/Main.java"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CreateTestDialog.Recents.Supers">
       <recent name="" />
@@ -107,46 +64,7 @@
     </key>
   </component>
   <component name="RunManager" selected="JUnit.RunCucumberTest">
-    <configuration name="Scenario: A1 scenario" type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
-      <option name="CUCUMBER_CORE_VERSION" value="5" />
-      <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/A2_Tests.feature" />
-      <option name="MAIN_CLASS_NAME" value="io.cucumber.core.cli.Main" />
-      <module name="A1-4004" />
-      <option name="NAME_FILTER" value="^A1 scenario$" />
-      <option name="PROGRAM_PARAMETERS" value=" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^A1 scenario$&quot;" />
-      <option name="SUGGESTED_NAME" value="Scenario: A1 scenario" />
-      <option name="WORKING_DIRECTORY" value="$MODULE_WORKING_DIR$" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="io.cucumber.core.cli.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="Scenario: A1_scenario" type="CucumberJavaRunConfigurationType" factoryName="Cucumber java" temporary="true" nameIsGenerated="true">
-      <option name="CUCUMBER_CORE_VERSION" value="5" />
-      <option name="FILE_PATH" value="$PROJECT_DIR$/src/test/resources/A2_Tests.feature" />
-      <option name="GLUE" value="org.example" />
-      <option name="MAIN_CLASS_NAME" value="io.cucumber.core.cli.Main" />
-      <module name="A1-4004" />
-      <option name="NAME_FILTER" value="^A1_scenario$" />
-      <option name="PROGRAM_PARAMETERS" value=" --plugin org.jetbrains.plugins.cucumber.java.run.CucumberJvm5SMFormatter --name &quot;^A1_scenario$&quot;" />
-      <option name="SUGGESTED_NAME" value="Scenario: A1_scenario" />
-      <option name="WORKING_DIRECTORY" value="$MODULE_WORKING_DIR$" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="io.cucumber.core.cli.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="CucumberStep.rig_a_new_game_of_blackjack_starts" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="MainTest.RESP_07_test_01" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="A1-4004" />
       <extension name="coverage">
         <pattern>
@@ -155,14 +73,14 @@
         </pattern>
       </extension>
       <option name="PACKAGE_NAME" value="org.example" />
-      <option name="MAIN_CLASS_NAME" value="org.example.CucumberStep" />
-      <option name="METHOD_NAME" value="rig_a_new_game_of_blackjack_starts" />
+      <option name="MAIN_CLASS_NAME" value="org.example.MainTest" />
+      <option name="METHOD_NAME" value="RESP_07_test_01" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="MainTest.RESP_06_test_01" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="MainTest.RESP_08_test_03" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="A1-4004" />
       <extension name="coverage">
         <pattern>
@@ -172,7 +90,7 @@
       </extension>
       <option name="PACKAGE_NAME" value="org.example" />
       <option name="MAIN_CLASS_NAME" value="org.example.MainTest" />
-      <option name="METHOD_NAME" value="RESP_06_test_01" />
+      <option name="METHOD_NAME" value="RESP_08_test_03" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -242,19 +160,9 @@
     </configuration>
     <recent_temporary>
       <list>
-<<<<<<< Updated upstream
-        <item itemvalue="JUnit.MainTest.RESP_08_test_03" />
+        <item itemvalue="JUnit.RunCucumberTest" />
         <item itemvalue="JUnit.MainTest.RESP_07_test_01" />
         <item itemvalue="JUnit.MainTest.RESP_08_test_03" />
-        <item itemvalue="JUnit.MainTest.RESP_07_test_01" />
-        <item itemvalue="JUnit.MainTest.RESP_07_test_01" />
-=======
-        <item itemvalue="JUnit.RunCucumberTest" />
-        <item itemvalue="JUnit.MainTest.RESP_06_test_01" />
-        <item itemvalue="Cucumber Java.Scenario: A1 scenario" />
-        <item itemvalue="JUnit.CucumberStep.rig_a_new_game_of_blackjack_starts" />
-        <item itemvalue="Cucumber Java.Scenario: A1_scenario" />
->>>>>>> Stashed changes
       </list>
     </recent_temporary>
   </component>
@@ -276,17 +184,7 @@
           <properties class="java.lang.NullPointerException" package="java.lang" />
           <option name="timeStamp" value="1" />
         </breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/main/java/org/example/Player.java</url>
-          <line>16</line>
-          <option name="timeStamp" value="2" />
-        </line-breakpoint>
       </breakpoints>
     </breakpoint-manager>
   </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/A1_Zhang_Lanyue_101192831$Scenario__A1_scenario.ic" NAME="Scenario: A1_scenario 覆盖结果" MODIFIED="1730926822071" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true">
-      <FILTER>io.cucumber.core.cli.*</FILTER>
-    </SUITE>
-  </component>
 </project>
\ No newline at end of file
